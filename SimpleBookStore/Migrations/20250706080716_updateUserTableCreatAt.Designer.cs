// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleBookStore.Data;

#nullable disable

namespace SimpleBookStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250706080716_updateUserTableCreatAt")]
    partial class updateUserTableCreatAt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SimpleBookStore.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SimpleBookStore.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "熱愛文字與城市觀察，擅長描寫人與人之間微妙的情感。",
                            CreatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            Name = "林語川"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "歷史科普作家，致力於用輕鬆的語言讓讀者了解複雜歷史事件。",
                            CreatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            Name = "張書涵"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "自由旅人與攝影記錄者，筆下風景充滿詩意與溫度。",
                            CreatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            Name = "陳彥廷"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "軟體工程師轉職作家，擅長將抽象技術轉化為易懂故事。",
                            CreatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            Name = "高雅雯"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "心理學背景出身，專注於內在成長與心靈療癒領域。",
                            CreatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            Name = "李思瑜"
                        });
                });

            modelBuilder.Entity("SimpleBookStore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "文學小說"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "歷史文化"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "旅遊休閒"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "電腦資訊"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "心理勵志"
                        });
                });

            modelBuilder.Entity("SimpleBookStore.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MinimumSpend")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "WELCOME10",
                            Description = "新會員首購折扣",
                            DiscountAmount = 100,
                            EndDate = new DateTime(2025, 10, 4, 8, 7, 16, 130, DateTimeKind.Utc).AddTicks(3604),
                            IsActive = true,
                            MinimumSpend = 500,
                            StartDate = new DateTime(2025, 7, 6, 8, 7, 16, 130, DateTimeKind.Utc).AddTicks(3603)
                        },
                        new
                        {
                            Id = 2,
                            Code = "SUMMER20",
                            Description = "夏季特賣全館折扣",
                            DiscountAmount = 200,
                            EndDate = new DateTime(2025, 10, 4, 8, 7, 16, 130, DateTimeKind.Utc).AddTicks(3619),
                            IsActive = true,
                            MinimumSpend = 1000,
                            StartDate = new DateTime(2025, 7, 6, 8, 7, 16, 130, DateTimeKind.Utc).AddTicks(3618)
                        },
                        new
                        {
                            Id = 3,
                            Code = "FREESHIP",
                            Description = "免運優惠券",
                            DiscountAmount = 60,
                            EndDate = new DateTime(2025, 10, 4, 8, 7, 16, 130, DateTimeKind.Utc).AddTicks(3621),
                            IsActive = true,
                            MinimumSpend = 0,
                            StartDate = new DateTime(2025, 7, 6, 8, 7, 16, 130, DateTimeKind.Utc).AddTicks(3621)
                        },
                        new
                        {
                            Id = 4,
                            Code = "VIP50",
                            Description = "VIP會員專屬優惠",
                            DiscountAmount = 500,
                            EndDate = new DateTime(2025, 10, 4, 8, 7, 16, 130, DateTimeKind.Utc).AddTicks(3623),
                            IsActive = true,
                            MinimumSpend = 2500,
                            StartDate = new DateTime(2025, 7, 6, 8, 7, 16, 130, DateTimeKind.Utc).AddTicks(3623)
                        },
                        new
                        {
                            Id = 5,
                            Code = "BIRTHDAY30",
                            Description = "生日禮遇折扣券",
                            DiscountAmount = 300,
                            EndDate = new DateTime(2025, 10, 4, 8, 7, 16, 130, DateTimeKind.Utc).AddTicks(3625),
                            IsActive = true,
                            MinimumSpend = 1500,
                            StartDate = new DateTime(2025, 7, 6, 8, 7, 16, 130, DateTimeKind.Utc).AddTicks(3625)
                        });
                });

            modelBuilder.Entity("SimpleBookStore.Models.EmailVerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationCodes");
                });

            modelBuilder.Entity("SimpleBookStore.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderDetailsId"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OrderDetailsId");

                    b.HasIndex("OrderHeaderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SimpleBookStore.Models.OrderHeader", b =>
                {
                    b.Property<int>("OrderHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderHeaderId"));

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("CouponCode")
                        .HasColumnType("longtext");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OrderTotal")
                        .HasColumnType("int");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("StripeSessionId")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("OrderHeaderId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("SimpleBookStore.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Publisher")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            Description = "當思想成為力量，城市也會呼吸。",
                            IsActive = true,
                            IsDeleted = false,
                            Price = 420,
                            PublishedDate = new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "幻語出版",
                            Title = "靈光之城：The Rise of Mindlight",
                            UpdatedAt = new DateTime(2025, 7, 6, 16, 7, 16, 130, DateTimeKind.Unspecified).AddTicks(3386)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 6, 16, 9, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            Description = "一部顛覆歷史視角的時空探險小說。",
                            IsActive = true,
                            IsDeleted = false,
                            Price = 499,
                            PublishedDate = new DateTime(2022, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "時代盒子文化",
                            Title = "時砂紀元：Chrono Sands",
                            UpdatedAt = new DateTime(2025, 7, 6, 16, 9, 16, 130, DateTimeKind.Unspecified).AddTicks(3386)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 7, 6, 16, 10, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            Description = "探索日常的陌生角落，走出你的Walkscape。",
                            IsActive = true,
                            IsDeleted = false,
                            Price = 310,
                            PublishedDate = new DateTime(2021, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "步路生活",
                            Title = "Walkscape：城市微旅行指南",
                            UpdatedAt = new DateTime(2025, 7, 6, 16, 10, 16, 130, DateTimeKind.Unspecified).AddTicks(3386)
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 7, 6, 16, 11, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            Description = "結合語言學與人工智慧的程式思維演進之路。",
                            IsActive = true,
                            IsDeleted = false,
                            Price = 650,
                            PublishedDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "幻碼實驗室",
                            Title = "Code Alchemy：寫給未來的程式語言",
                            UpdatedAt = new DateTime(2025, 7, 6, 16, 11, 16, 130, DateTimeKind.Unspecified).AddTicks(3386)
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 7, 6, 16, 12, 16, 130, DateTimeKind.Unspecified).AddTicks(3386),
                            Description = "給被生活困住的你，一場重啟心靈的旅程。",
                            IsActive = true,
                            IsDeleted = false,
                            Price = 370,
                            PublishedDate = new DateTime(2020, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "心靈迴響",
                            Title = "Reset Me：重新啟動的勇氣",
                            UpdatedAt = new DateTime(2025, 7, 6, 16, 12, 16, 130, DateTimeKind.Unspecified).AddTicks(3386)
                        });
                });

            modelBuilder.Entity("SimpleBookStore.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SimpleBookStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SimpleBookStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleBookStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SimpleBookStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleBookStore.Models.EmailVerificationCode", b =>
                {
                    b.HasOne("SimpleBookStore.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleBookStore.Models.OrderDetails", b =>
                {
                    b.HasOne("SimpleBookStore.Models.OrderHeader", "OrderHeader")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");
                });

            modelBuilder.Entity("SimpleBookStore.Models.Product", b =>
                {
                    b.HasOne("SimpleBookStore.Models.Author", "Author")
                        .WithMany("Products")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleBookStore.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SimpleBookStore.Models.ShoppingCart", b =>
                {
                    b.HasOne("SimpleBookStore.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SimpleBookStore.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleBookStore.Models.Author", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SimpleBookStore.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SimpleBookStore.Models.OrderHeader", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
